<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/latest http://levelsbeyond.com/schema/latest/studio.xsd"
          id="customAnyAssetIngest_rh"
          name="customAnyAssetIngest_rh"
          executionLabelExpression="customAnyAssetIngest_rh | ${fileToIngest.name} "
          subjectDOClassName=""
          showInUserInterface="true"
          resultDataDef=""
          sdkVersion=""
          group="Rob"
>

    <initialStepName>check if workflow is running</initialStepName>


    <queryStep name="check if workflow is running"
               targetDataObjectClass="WorkflowExecution"
               resultDataDef="currentExecutions"
               executionLabelExpression="RH - Is a workflow running on this file already? ${currentExecutions.size() != 0}"
               pctComplete="5"
    >
        <transition condition="${currentExecutions.size() == 0}">
            <targetStepName>check against CsvMap for instance of file</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>workflow is running</targetStepName>
        </transition>

        <criteria>
            <![CDATA[
                <criteria>
                    <and>
                        <condition property="workflowVersion.workflow.key" op="eq">
                            <test value="${ #this.workflow.workflowVersion.workflow.key }" />
                        </condition>
                        <condition property="uuid" op="noteq">
                            <test value="${ #this.workflow.uuid }" />
                        </condition>
                        <condition property="executionLabel" op="like">
							<test value="%${T(org.apache.commons.lang.StringEscapeUtils).escapeXml(fileToIngest.absolutePath)}%" />
						</condition>
                        <condition property="status" op="in">
                            <tests>
                                <test value="CREATED" />
                                <test value="QUEUED" />
                                <test value="EXECUTING" />
                            </tests>
                        </condition>
                    </and>
                </criteria>
            ]]>
        </criteria>
    </queryStep>

  <groovyStep name="check against CsvMap for instance of file"
              executionLabelExpression="Checking for csvmap instance | CheckDuplicates = ${checkForDuplicate}"
              resultDataDef="fileSpecificMetadata"
  >
      <transition condition="${fileSpecificMetadata.size() &gt; 0}">
          <targetStepName>ingest asset</targetStepName>
      </transition>
      <transition condition="${true}">
          <targetStepName>end</targetStepName>
      </transition>
      <script>
            <![CDATA[
          import groovy.*
          import groovy.json.*
          import groovy.json.JsonSlurper
          def jsonSlurper = new JsonSlurper()
          def object = jsonSlurper.parseText(CsvMap.toString())
          return object[fileToIngest.name]!= null ? object[fileToIngest.name] : [:]
          ]]>
        </script>
<!--      <script>-->
<!--          <![CDATA[-->
<!--          import groovy.*-->
<!--          import groovy.json.*-->
<!--          import groovy.json.JsonSlurper-->
<!--          //test if any csvmap entries match current file-->
<!--          //-->
<!--//            def csvJsonMap = CsvMap-->


<!--            def output = [:]-->
<!--//            CsvMap.each { key ->-->
<!--//            if ( key.asText() == fileToIngest.name){-->
<!--//                output = CsvMap.get(key)-->
<!--//            }-->
<!--//          }-->
<!--          CsvMap.any{ key ->-->
<!--            return key.asText()-->
<!--          }-->
<!--          return output-->
<!--          ]]>-->
<!--      </script>-->

  </groovyStep>
    

    <executeSubflowStep name="ingest asset"
                        targetWorkflowId="${ingestSubflow}"
                        subjectChangePath="${fileToIngest}"
                        subflowTargetDataDef="fileToIngest"
                        resultDataDef="assetMaster"
                        executionLabelExpression="ingesting ${fileToIngest.absolutePath}"
                        pctComplete="25"
                        nextStep="set metadata"
    >
        <subflowContextDataMapping parentDataDef="assetVersion"             subflowDataDef="assetVersion"/>
        <subflowContextDataMapping parentDataDef="assetName"                subflowDataDef="assetName"/>
        <subflowContextDataMapping parentDataDef="sourceAsMezz"             subflowDataDef="sourceAsMezz"/>
        <subflowContextDataMapping parentDataDef="checkForDuplicate"        subflowDataDef="checkForDuplicate"/>
        <subflowContextDataMapping parentDataDef="overwriteExisting"        subflowDataDef="overwriteExisting"/>
        <subflowContextDataMapping parentDataDef="versionDuplicate"         subflowDataDef="versionDuplicate"/>
        <subflowContextDataMapping parentDataDef="fileSpecificMetadata"     subflowDataDef="fileSpecificMetadata"/>
    </executeSubflowStep>


    <executeSubflowStep name="set metadata"
                        targetWorkflowId="${metadataSubflow}"
                        subjectChangePath="${assetMaster}"
                        subflowTargetDataDef="asset"
                        executionLabelExpression="Add any collections, categories, and metadata for ${assetMaster}"
                        pctComplete="50"
                        nextStep="add category to asset"
    >
        <subflowContextDataMapping parentDataDef="failOnMetadataError"      subflowDataDef="failOnError"/>
        <subflowContextDataMapping parentDataDef="collections"              subflowDataDef="collections"/>
        <subflowContextDataMapping parentDataDef="metadataForm"             subflowDataDef="metadataForm"/>
        <subflowContextDataMapping parentDataDef="metadataFormType"         subflowDataDef="metadataFormType"/>
        <subflowContextDataMapping parentDataDef="categories"               subflowDataDef="categories"/>
        <subflowContextDataMapping parentDataDef="categoryNames"            subflowDataDef="categoryNames"/>
<!--        <subflowContextDataMapping parentDataDef="jsonMetadata"             subflowDataDef="jsonMetadata"/>-->
        <subflowContextDataMapping parentDataDef="linkMetadata"             subflowDataDef="linkMetadata"/>
        <subflowContextDataMapping parentDataDef="fileSpecificMetadata" subflowDataDef="jsonMetadata"/>
    </executeSubflowStep>

<!--    <executeSubflowStep name="add category"-->
<!--                        targetWorkflowId="addAssetToCategory_rh"-->
<!--                        executionLabelExpression=" adding category ${fileSpecificMetadata.categoryName}"-->
<!--                        subflowTargetDataDef="categoryName"-->
<!--                        subjectChangePath="${assetMaster}"-->
<!--                        nextStep="create proxies"-->
<!--    >-->
<!--        <subflowContextDataMapping parentDataDef="fileSpecificMetadata" subflowDataDef="fileSpecificMetadata"/>-->
<!--        <subflowContextDataMapping parentDataDef="categoryName" subflowDataDef="categoryName"/>-->
<!--    </executeSubflowStep>-->
    <nimbus:changeMetaCategoryStep
            name="add category to asset"
            targetObjectExpression="${assetMaster}"
            executionLabelExpression="adding category ${categoryName}"
            nextStep="create proxies">
        <nimbus:addCategory>${categoryName?.equals('Null') ? 'no department' : categoryName}</nimbus:addCategory>
    </nimbus:changeMetaCategoryStep>

    <executeSubflowStep name="create proxies"
                        targetWorkflowId="${proxiesSubflow}"
                        subjectChangePath="${assetMaster}"
                        waitForCompletionExpression="${!asyncProxies}"
                        executionLabelExpression="Creating proxies ${asyncProxies? 'asynchronous' : 'synchronous'}"
                        pctComplete="99"
                        nextStep="end"
    >
        <subflowContextDataMapping parentDataDef="failOnProxiesError"       subflowDataDef="failOnError"/>
        <!-- create -->
        <subflowContextDataMapping parentDataDef="prioritiesJson"           subflowDataDef="prioritiesJson"/>
        <subflowContextDataMapping parentDataDef="createMezz"               subflowDataDef="createMezz"/>
        <subflowContextDataMapping parentDataDef="createProxy"              subflowDataDef="createProxy"/>
        <subflowContextDataMapping parentDataDef="createThumbVideo"         subflowDataDef="createThumbVideo"/>
        <subflowContextDataMapping parentDataDef="createThumb"              subflowDataDef="createThumb"/>
        <!-- file -->
        <subflowContextDataMapping parentDataDef="mezzFile"                 subflowDataDef="mezzFile"/>
        <subflowContextDataMapping parentDataDef="proxyFile"                subflowDataDef="proxyFile"/>
        <subflowContextDataMapping parentDataDef="thumbFile"                subflowDataDef="thumbFile"/>
        <subflowContextDataMapping parentDataDef="thumbVideoFile"           subflowDataDef="thumbVideoFile"/>
        <!-- creation templates/args -->
        <subflowContextDataMapping parentDataDef="videoMezzTemplate"        subflowDataDef="videoMezzTemplate"/>
        <subflowContextDataMapping parentDataDef="videoProxyTemplate"       subflowDataDef="videoProxyTemplate"/>
        <subflowContextDataMapping parentDataDef="videoThumbVideoTemplate"  subflowDataDef="videoThumbVideoTemplate"/>
        <subflowContextDataMapping parentDataDef="videoThumbnailPercentage" subflowDataDef="videoThumbnailPercentage"/>
        <subflowContextDataMapping parentDataDef="audioProxyTemplate"       subflowDataDef="audioProxyTemplate"/>
        <subflowContextDataMapping parentDataDef="imageProxyArguments"      subflowDataDef="imageProxyArguments"/>
        <subflowContextDataMapping parentDataDef="imageThumbArguments"      subflowDataDef="imageThumbArguments"/>
        <subflowContextDataMapping parentDataDef="documentProxyArguments"   subflowDataDef="documentProxyArguments"/>
        <subflowContextDataMapping parentDataDef="documentThumbArguments"   subflowDataDef="documentThumbArguments"/>
    </executeSubflowStep>


    <!-- ................................................... End Steps .................................................... -->
    <!-- success -->
    <noopStep name="end"	pctComplete="100"/>


    <!-- fail -->
    <failWorkflowStep name="workflow is running"
                      executionLabelExpression="Workflow already executing on the file"
                      reasonExpression="Workflow already executing on the file"
    />


    <!-- ............................................... Context Data Defs ................................................ -->

    <!-- ....... User Input Variables ........ -->
    <contextDataDef name="fileToIngest" 		    dataType="File"				userInput="true"    label="File To Ingest"   required="true" displayIndex="1" />
    <contextDataDef name="collections"              dataType="Data Object"      userInput="true"    label="Collections"      multiple="true" displayIndex="2" >
        <picklist>
            <dataObjectSearch dataObjectClass="AssetCollection">
                <searchPath>name</searchPath>
            </dataObjectSearch>
        </picklist>
    </contextDataDef>
    <contextDataDef name="metadataForm"             dataType="MetadataForm"     userInput="true"    label="Metadata Form" displayIndex="3" />


    <!-- .......... Input Variables .......... -->
    <!-- metadata options -->
    <contextDataDef name="CsvMap" dataType="JSON" />
    <contextDataDef name="fileSpecificMetadata" dataType="JSON" />

    <contextDataDef name="failOnMetadataError"      dataType="Boolean"/>
    <contextDataDef name="categories"               dataType="Data Object"      multiple="true"/>
    <contextDataDef name="categoryNames"            dataType="String"           multiple="true"/>
    <contextDataDef name="categoryName" dataType="String"  defaultDataExpression="${fileSpecificMetadata?.category}"/>
    <contextDataDef name="jsonMetadata"             dataType="JSON">
        <description>
            Single JSON where:
            Keys are metadata property names
            Values are what to set the matching property to on this asset
        </description>
    </contextDataDef>
    <contextDataDef name="linkMetadata"             dataType="JSON"             multiple="true">
        <description>
            Array of JSONs where:
            Each JSON has 2 Keys (propertyName and linkInfo):
            propertyName's value is a metadata property name of type link
            linkInfo's value is a JSON with 2 keys (title and url):
            title's value is the display name for the link
            url's value is the url to open when the title is clicked on
        </description>
    </contextDataDef>
    <contextDataDef name="metadataFormType"         dataType="String"           defaultDataExpression="access">
        <description>
            TEMPORARY!!! (Forms will be standardized to the same format in the future)
            Valid types = "access" or "panel"
        </description>
    </contextDataDef>
    <!-- ingest source options (defaults in subflow) -->
    <contextDataDef name="sourceAsMezz"             dataType="Boolean"          defaultDataExpression="${skipMezzanineFlag ?: null}"/>
    <contextDataDef name="checkForDuplicate"        dataType="Boolean"          defaultDataExpression="true"/>
    <contextDataDef name="overwriteExisting"        dataType="Boolean"/>
    <contextDataDef name="versionDuplicate"         dataType="Boolean"/>
    <contextDataDef name="assetName"                dataType="String"           defaultDataExpression="${versionName != null? versionName : null}"/>
    <contextDataDef name="assetVersion" 		    dataType="Data Object"      defaultDataExpression="${assetForVersioning != null? assetForVersioning : null}">
        <description>
            Passed in to operate on an existing asset rather than looking for a duplicate asset or creating a new one
        </description>
    </contextDataDef>
    <!-- transcode options -->
    <contextDataDef name="failOnProxiesError"       dataType="Boolean"/>
    <contextDataDef name="asyncProxies"             dataType="Boolean"          defaultDataExpression="${asyncProxiesFlag ?: (#sysconfig('workflows.default.ingestAsset.asyncProxies') ?: true)}"/>
    <!-- create proxies? (defaults in subflows) -->
    <contextDataDef name="prioritiesJson"           dataType="JSON">
        <description>
            A JSON with the structure:
            {"mezzanine":w, "proxy":x, "thumbnailVideo":y, "thumbnail":z}
        </description>
    </contextDataDef>
    <contextDataDef name="createMezz"               dataType="Boolean"/>
    <contextDataDef name="createProxy"              dataType="Boolean"/>
    <contextDataDef name="createThumb"              dataType="Boolean"/>
    <contextDataDef name="createThumbVideo"         dataType="Boolean"/>
    <!-- supply a file for proxies? -->
    <contextDataDef name="mezzFile"                 dataType="File"/>
    <contextDataDef name="proxyFile"                dataType="File"/>
    <contextDataDef name="thumbFile"                dataType="File"/>
    <contextDataDef name="thumbVideoFile"           dataType="File"/>
    <!-- Templates/Args for proxies creation (defaults in subflows) -->
    <contextDataDef name="videoMezzTemplate"    	dataType="String"/>
    <contextDataDef name="videoProxyTemplate"    	dataType="String"/>
    <contextDataDef name="videoThumbVideoTemplate"  dataType="String"/>
    <contextDataDef name="videoThumbnailPercentage" dataType="Integer"/>
    <contextDataDef name="audioProxyTemplate"       dataType="String"/>
    <contextDataDef name="imageProxyArguments"      dataType="String"/>
    <contextDataDef name="imageThumbArguments"      dataType="String"/>
    <contextDataDef name="documentProxyArguments"   dataType="String"/>
    <contextDataDef name="documentThumbArguments"   dataType="String"/>

    <!-- ....... Processing Variables ........ -->
    
    <contextDataDef name="currentExecutions" 	    dataType="Data Object" 	    multiple="true"/>
    <contextDataDef name="assetMaster" 			    dataType="Data Object"/>
    <contextDataDef name="ingestSubflow"            dataType="String"           defaultDataExpression="${'customBaseAssetIngest_rh'}"/>
    <contextDataDef name="metadataSubflow"          dataType="String"           defaultDataExpression="${'_saveAnyAssetMetadata'}"/>
    <contextDataDef name="proxiesSubflow"           dataType="String"           defaultDataExpression="${'customCreateProxiesAnyAsset_rh'}"/>

    <!-- ..... Deprecated But Supported ...... -->
    <contextDataDef name="assetForVersioning"       dataType="Data Object"/>
    <contextDataDef name="asyncProxiesFlag"         dataType="Boolean"/>
    <contextDataDef name="skipMezzanineFlag"        dataType="Boolean"/>
    <contextDataDef name="versionName"              dataType="String"/>

</workflow>